#!/usr/bin/env bash
set -e

# ////////////////////////////////////////////////////////////////////////////
# // Global variables ////////////////////////////////////////////////////////
JUST_SCRIPT_PATH=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
PROJECT_ROOT_PATH=$(dirname "$JUST_SCRIPT_PATH")
DEBUG="${DEBUG:-false}"

PROJECT_NAME="${PROJECT_NAME:-[PROJECT_NAME]}"

ROOT_AS_SUBPROJECT_NAME='root'
ROOT_AS_SUBPROJECT_LOCATION='.'

ENVIRONMENT_AS_SUBPROJECT_NAME='environment'
ENVIRONMENT_AS_SUBPROJECT_LOCATION='src/.environment'

SWS_SUBPROJECT_NAME='sws'
SWS_SUBPROJECT_LOCATION='src/.sws'

API_SPEC_SUBPROJECT_NAME='api-spec'
API_SPEC_SUBPROJECT_LOCATION='src/api-spec'

API_SUBPROJECT_NAME='api'
API_SUBPROJECT_LOCATION='src/api'

LANGCHAIN_SUBPROJECT_NAME='langchain'
LANGCHAIN_SUBPROJECT_LOCATION='src/langchain'

LANGCHAIN_NB_SUBPROJECT_NAME='langchain-notebooks'
LANGCHAIN_NB_SUBPROJECT_LOCATION='src/langchain-notebooks'

CICD_SUBPROJECT_NAME='cicd'
CICD_SUBPROJECT_LOCATION='src/.cicd'

SUPPORTED_PROJECTS=()
SUPPORTED_PROJECTS+=( "$API_SUBPROJECT_NAME" )
SUPPORTED_PROJECTS+=( "$CICD_SUBPROJECT_NAME" )

IS_CI="${IS_CI:-false}"

if [[ ! -d "${PROJECT_ROOT_PATH}" ]]; then
    echo -en "${c_lred}"
    echo "❗️ERROR:${c_reset} Project root '${PROJECT_ROOT_PATH}' does not exist, abort"
    echo
    exit 1
fi

cd "$PROJECT_ROOT_PATH"

# ////////////////////////////////////////////////////////////////////////////
# // Output helper ///////////////////////////////////////////////////////////
source .just/output-helper.sh
source .just/environment-evaluation.sh
source .just/environment-checks.sh
source .just/support.sh

# //////////////////////////////////////////////////////////////////////////////
# Root actions
do_setup_action() {
    local environment_name="${1:-local}"
    local update_question_timeout_in_s=${UPDATE_QUESTION_TIMEOUT_IN_S:-6}
    export HIDE_PROJECT_TITLE=true

    show_command_title '[root]' '.' "setup $@"

    set +e
    show_question "Should the '.env' file be updated (timeout ${update_question_timeout_in_s}s)? [y|N]"
    read -t ${update_question_timeout_in_s} should_update_dotenv_file
    if [[ "${?}" == '0' && "${should_update_dotenv_file}" != "${should_update_dotenv_file#[y]}" ]]; then
        show_info "Update current '.env' file"
        do_update_dotenv_file
        exit 1
    else
        show_info "Updating '.env' skipped"
    fi
    set -e

    just $ROOT_AS_SUBPROJECT_NAME setup
    echo
    just $API_SUBPROJECT_NAME setup
}

do_code_style_action() {
    export HIDE_PROJECT_TITLE=true
    local type=''

    case ${1} in
        check)
        ;;
        fix)
            type=':fix'
        ;;
        *)
            echo -e "${c_red}ERROR:${c_reset} Type '${1}' not supported"
            exit 1
        ;;
    esac

    just $ROOT_AS_SUBPROJECT_NAME "code:style${type}"
    echo
    just $API_SPEC_SUBPROJECT_NAME "code:style${type}"
    echo
    just $API_SUBPROJECT_NAME "code:style${type}"
}

do_code_analyse_action() {
    export HIDE_PROJECT_TITLE=true
    local type=''

    case ${1} in
        check)
        ;;
        fix)
            type=':fix'
        ;;
        *)
            echo -e "${c_red}ERROR:${c_reset} Type '${1}' not supported"
            exit 1
        ;;
    esac

    just $ROOT_AS_SUBPROJECT_NAME "code:analyse${type}"
    echo
    just $API_SPEC_SUBPROJECT_NAME "code:analyse${type}"
    echo
    just $API_SUBPROJECT_NAME "code:analyse${type}"
}

# ////////////////////////////////////////////////////////////////////////////
# // Title ///////////////////////////////////////////////////////////////////
case "${1}" in
    cicd|ci|env|e|environment)
    ;;
    *)
        show_project_title "${PROJECT_NAME}"
    ;;
esac

# ////////////////////////////////////////////////////////////////////////////
# // Checks //////////////////////////////////////////////////////////////////
do_environment_checks "$@"

# ////////////////////////////////////////////////////////////////////////////
# Command router /////////////////////////////////////////////////////////////
action=${1}
shift 1
case ${action} in
    up|start)
        [[ "$#" -gt 0 ]] \
            && ${DOCKER_COMPOSE_EXECUTABLE} up -d "${@}" --remove-orphans \
            && exit 0

        ${DOCKER_COMPOSE_EXECUTABLE} up -d ${API_DEFAULT_SERVICES} --remove-orphans
    ;;
    down|stop)
        [[ "$#" -gt 0 ]] \
            && ${DOCKER_COMPOSE_EXECUTABLE} stop "${@}" \
            && exit 0

        ${DOCKER_COMPOSE_EXECUTABLE} stop
    ;;
    restart)
        [[ "$#" -gt 0 ]] \
            && ${DOCKER_COMPOSE_EXECUTABLE} restart "${@}" \
            && exit 0

        ${DOCKER_COMPOSE_EXECUTABLE} restart
    ;;
    ps)
        ${DOCKER_COMPOSE_EXECUTABLE} ps --format "table {{.Service}}\t{{.Ports}}\t{{.Status}}"
    ;;
    logs)
        ${DOCKER_COMPOSE_EXECUTABLE} logs "${@}"
    ;;
    setup)
        do_setup_action "$@"
    ;;
    code:style)
        do_code_style_action 'check' ${1}
    ;;
    code:style:fix)
        do_code_style_action 'fix' ${1}
    ;;
    code:analyse)
        do_code_analyse_action 'check' ${1}
    ;;
    code:analyse:fix)
        do_code_analyse_action 'fix' ${1}
    ;;
    $ENVIRONMENT_AS_SUBPROJECT_NAME|env|e)
        source $ENVIRONMENT_AS_SUBPROJECT_LOCATION/.just-environment
    ;;
    $ROOT_AS_SUBPROJECT_NAME|r)
        source src/.root/.just-root
    ;;
    $SWS_SUBPROJECT_NAME|s)
        source src/.sws/.just-sws
    ;;
    $API_SPEC_SUBPROJECT_NAME|api_spec|as)
        source $API_SPEC_SUBPROJECT_LOCATION/.just-api-spec
    ;;
    $API_SUBPROJECT_NAME|a)
        source $API_SUBPROJECT_LOCATION/.just-api
    ;;
    $LANGCHAIN_SUBPROJECT_NAME|l)
        source $LANGCHAIN_SUBPROJECT_LOCATION/.just-langchain
    ;;
    $LANGCHAIN_NB_SUBPROJECT_NAME|lnb|ln)
        source $LANGCHAIN_NB_SUBPROJECT_LOCATION/.just-langchain-notebooks
    ;;
    $CICD_SUBPROJECT_NAME|ci)
        source $CICD_SUBPROJECT_LOCATION/.just-cicd
    ;;
    __clean)
        show_info "Stop stack, remove all local container, remove all local images & rm .env"
        $DOCKER_COMPOSE_EXECUTABLE stop
        docker rm $(docker ps -a -q) --force
        docker rmi $(docker image ls -q) --force
        [[ -f .env ]] && rm .env
    ;;
    ''|*|help)
        echo -e "  ${c_red}Usage:${c_reset} just|j [command|subproject] [command]"
        echo
        echo -e "  supported commands:\n"
        echo -e "    up|start [services*]   - start stack/service/subproject"
        echo -e "    down|stop [services*]  - shut stack/service/subproject down"
        echo -e "    restart [services*]    - restart service containers"
        echo -e "    ps                     - list running services"
        echo -e "    logs                   - prints logs running services"
        echo -e "    setup                  - installs code dependencies"
        echo -e "    code:analyse[:fix]     - checks code"
        echo -e "    code:style[:fix]       - applies code style"
        echo -e "    env                    - manage environment settings (encrypt, decrypt, activate)"
        echo
        echo "  subprojects:"
        echo
        for subproject in "${SUPPORTED_PROJECTS[@]}"; do
            echo -e "    ${subproject} [command]"
        done
        echo
        exit 1
;;
esac
