#!/usr/bin/env bash

# //////////////////////////////////////////////////////////////////////////////
# Define globals
ENCRYPTION_KEY_FILENAME=${ENCRYPTION_KEY_FILENAME:-.env.encryption-key}
DIGITALOCEAN_ACCESS_TOKEN_FILENAME=${DIGITALOCEAN_ACCESS_TOKEN_FILENAME:-.env.digitalocean-token}
dependencies=( 'docker' 'jq' )
custom_bin_path="$(expand_path './bin')"
PATH_add "${custom_bin_path}"
alias j=just

# //////////////////////////////////////////////////////////////////////////////
# Define colors
c_reset=''
c_red=''
c_lred=''
c_green=''
c_lgreen=''
c_yellow=''
c_lyellow=''

if [[ ${IS_CI:-false} == 'false' ]]; then
  c_reset=$(echo -en '\033[0m')
  c_red=$(echo -en '\033[00;31m')
  c_lred=$(echo -en '\033[01;31m')
  c_green=$(echo -en '\033[00;32m')
  c_lgreen=$(echo -en '\033[01;32m')
  c_yellow=$(echo -en '\033[00;33m')
  c_lyellow=$(echo -en '\033[01;33m')
fi

# //////////////////////////////////////////////////////////////////////////////
# Check project dependencies are met
has_dependency_error='false';

# load nvm
if [[ -n "${NVM_DIR}" ]]; then
    type nvm >/dev/null 2>&1 || . "${NVM_DIR}/nvm.sh"
    nvm use
    echo
else
    echo -en "${c_yellow}"
    echo -e "WARN:  'nvm' seems to be missing. Ensure that '\$NVM_DIR' is present"
    echo -en "${c_reset}"
    has_dependency_error='false'
fi

for dependency in "${dependencies[@]}"; do
   if ! command -v "${dependency}" &>/dev/null; then
    echo -en "${c_red}"
    echo -e "ERROR: '${dependency}' is missing or not in \$PATH"
    echo -en "${c_reset}"
    has_dependency_error='true'
  fi
done

[[ "${has_dependency_error}" == 'true' ]] && echo '' && exit 1;

# //////////////////////////////////////////////////////////////////////////////
# Define environment variable defaults
export USERID=${USERID:-$(id -u)}
export API_DEFAULT_SERVICES=${API_DEFAULT_SERVICES:-''}
export COMPOSE_PROJECT_NAME=${COMPOSE_PROJECT_NAME:-$(basename $(pwd))}
export COMPOSE_FILE=docker-compose.tooling.yml
export DB_PASSWORD=null
export DB_USERNAME=null
export DB_DATABASE=null
export DB_PORT=null
export OPENAI_API_KEY=null

# //////////////////////////////////////////////////////////////////////////////
# Load environment variables
env_files=( './.env' './.env.docker' './.env.xdebug' './.env.custom')

docker compose &> /dev/null
if [ $? == 0 ]; then
  export DOCKER_COMPOSE_EXECUTABLE='docker compose'
else
  export DOCKER_COMPOSE_EXECUTABLE='docker-compose'
fi

loaded_env_files=()

for env_file in "${env_files[@]}"; do
  expanded_env_file="$(expand_path "${env_file}")"
  if [[ -f "${expanded_env_file}" ]]; then
    dotenv "${expanded_env_file}"
    loaded_env_files+=( "${expanded_env_file}" )
  fi
done

if [ -f "${ENCRYPTION_KEY_FILENAME}" ]; then
  echo -en "${c_green}"
  expanded_env_file="$(expand_path "${ENCRYPTION_KEY_FILENAME}")"
  echo -e  "INFO:${c_reset}  \$ENVIRONMENT_ENCRYPTION_KEY resolved from '${ENCRYPTION_KEY_FILENAME}'"
  dotenv "${expanded_env_file}"
  loaded_env_files+=( "${expanded_env_file}" )
fi

if [ -f "${DIGITALOCEAN_ACCESS_TOKEN_FILENAME}" ]; then
  echo -en "${c_green}"
  expanded_env_file="$(expand_path "${DIGITALOCEAN_ACCESS_TOKEN_FILENAME}")"
  echo -e  "INFO:${c_reset}  \$DIGITALOCEAN_ACCESS_TOKEN resolved from '${DIGITALOCEAN_ACCESS_TOKEN_FILENAME}'"
  dotenv "${expanded_env_file}"
  loaded_env_files+=( "${expanded_env_file}" )
fi

if [[ ${#loaded_env_files[@]} -gt 0 ]]; then
  echo -en "${c_green}"
  echo -e  "INFO:${c_reset}  environment file(s) loaded in the following order:"
  echo
  for single_env_file in ${loaded_env_files[*]}; do
    echo -e  "       - ${single_env_file}"
  done
fi

if [[ ${APP_ENV} == 'local' ]]; then
    GIT_CURRENT_COMMIT_ID=no-commit-id
    if which git &> /dev/null && [ -d .git ]; then
      GIT_CURRENT_COMMIT_ID=$(git rev-parse HEAD)
    fi
    export GIT_CURRENT_COMMIT_ID=$GIT_CURRENT_COMMIT_ID
fi

# //////////////////////////////////////////////////////////////////////////////
# Distributes environment variables to subprojects
env_source='.env'
env_file_target_subprojects=( 'src/api' )

expanded_env_source_file="$(expand_path "${env_source}")"

echo

if [ ! -f "${expanded_env_source_file}" ]; then
    echo -en "${c_lyellow}"
    echo "WARN:${c_reset}  root '.env' file missing, abort syncing. Consider activating environment."
    echo
    return 1
fi

echo -e  "${c_green}INFO:${c_reset}  Sync \`${env_source}\` with subprojects\n"
for env_file_target_subproject in "${env_file_target_subprojects[@]}"; do
  env_file_target="${env_file_target_subproject}/.env"
  expanded_env_file_target_subproject="$(expand_path "${env_file_target}")"

  if [[ -f "${expanded_env_source_file}" ]]; then
    cp -f "${expanded_env_source_file}" "${expanded_env_file_target_subproject}" &>/dev/null
    if [[ "${?}" != "0" ]]; then
      echo -e "       - ${c_red}ERROR: Failed to sync${c_reset} - '${env_file_target}'"
      echo -en "${c_reset}"
    else
      echo -e "       - ${expanded_env_file_target_subproject}"
    fi
  fi
done

echo # intentionally linebreak
